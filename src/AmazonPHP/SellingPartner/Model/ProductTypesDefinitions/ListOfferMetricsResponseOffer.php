<?php

declare(strict_types=1);


namespace AmazonPHP\SellingPartner\Model\ProductTypesDefinitions;

use \ArrayAccess;
use \AmazonPHP\SellingPartner\ObjectSerializer;
use \AmazonPHP\SellingPartner\ModelInterface;
use \AmazonPHP\SellingPartner\Exception\AssertionException;

/**
* Selling Partner API for Replenishment
*
* The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
*
* The version of the OpenAPI document: 2022-11-07
*
* This class was auto-generated by https://openapi-generator.tech
* Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ListOfferMetricsResponseOffer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ListOfferMetricsResponseOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'asin' => 'string',
        'not_delivered_due_to_oos' => 'float',
        'total_subscriptions_revenue' => 'float',
        'shipped_subscription_units' => 'float',
        'active_subscriptions' => 'float',
        'revenue_penetration' => 'float',
        'lost_revenue_due_to_oos' => 'float',
        'coupons_revenue_penetration' => 'float',
        'next30_day_total_subscriptions_revenue' => 'float',
        'next60_day_total_subscriptions_revenue' => 'float',
        'next90_day_total_subscriptions_revenue' => 'float',
        'next30_day_shipped_subscription_units' => 'float',
        'next60_day_shipped_subscription_units' => 'float',
        'next90_day_shipped_subscription_units' => 'float',
        'time_interval' => '\AmazonPHP\SellingPartner\Model\ProductTypesDefinitions\TimeInterval',
        'currency_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'asin' => null,
        'not_delivered_due_to_oos' => 'double',
        'total_subscriptions_revenue' => 'double',
        'shipped_subscription_units' => 'int64',
        'active_subscriptions' => 'int64',
        'revenue_penetration' => 'double',
        'lost_revenue_due_to_oos' => 'double',
        'coupons_revenue_penetration' => 'double',
        'next30_day_total_subscriptions_revenue' => 'double',
        'next60_day_total_subscriptions_revenue' => 'double',
        'next90_day_total_subscriptions_revenue' => 'double',
        'next30_day_shipped_subscription_units' => 'int64',
        'next60_day_shipped_subscription_units' => 'int64',
        'next90_day_shipped_subscription_units' => 'int64',
        'time_interval' => null,
        'currency_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'asin' => 'asin',
        'not_delivered_due_to_oos' => 'notDeliveredDueToOOS',
        'total_subscriptions_revenue' => 'totalSubscriptionsRevenue',
        'shipped_subscription_units' => 'shippedSubscriptionUnits',
        'active_subscriptions' => 'activeSubscriptions',
        'revenue_penetration' => 'revenuePenetration',
        'lost_revenue_due_to_oos' => 'lostRevenueDueToOOS',
        'coupons_revenue_penetration' => 'couponsRevenuePenetration',
        'next30_day_total_subscriptions_revenue' => 'next30DayTotalSubscriptionsRevenue',
        'next60_day_total_subscriptions_revenue' => 'next60DayTotalSubscriptionsRevenue',
        'next90_day_total_subscriptions_revenue' => 'next90DayTotalSubscriptionsRevenue',
        'next30_day_shipped_subscription_units' => 'next30DayShippedSubscriptionUnits',
        'next60_day_shipped_subscription_units' => 'next60DayShippedSubscriptionUnits',
        'next90_day_shipped_subscription_units' => 'next90DayShippedSubscriptionUnits',
        'time_interval' => 'timeInterval',
        'currency_code' => 'currencyCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'asin' => 'setAsin',
        'not_delivered_due_to_oos' => 'setNotDeliveredDueToOos',
        'total_subscriptions_revenue' => 'setTotalSubscriptionsRevenue',
        'shipped_subscription_units' => 'setShippedSubscriptionUnits',
        'active_subscriptions' => 'setActiveSubscriptions',
        'revenue_penetration' => 'setRevenuePenetration',
        'lost_revenue_due_to_oos' => 'setLostRevenueDueToOos',
        'coupons_revenue_penetration' => 'setCouponsRevenuePenetration',
        'next30_day_total_subscriptions_revenue' => 'setNext30DayTotalSubscriptionsRevenue',
        'next60_day_total_subscriptions_revenue' => 'setNext60DayTotalSubscriptionsRevenue',
        'next90_day_total_subscriptions_revenue' => 'setNext90DayTotalSubscriptionsRevenue',
        'next30_day_shipped_subscription_units' => 'setNext30DayShippedSubscriptionUnits',
        'next60_day_shipped_subscription_units' => 'setNext60DayShippedSubscriptionUnits',
        'next90_day_shipped_subscription_units' => 'setNext90DayShippedSubscriptionUnits',
        'time_interval' => 'setTimeInterval',
        'currency_code' => 'setCurrencyCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'asin' => 'getAsin',
        'not_delivered_due_to_oos' => 'getNotDeliveredDueToOos',
        'total_subscriptions_revenue' => 'getTotalSubscriptionsRevenue',
        'shipped_subscription_units' => 'getShippedSubscriptionUnits',
        'active_subscriptions' => 'getActiveSubscriptions',
        'revenue_penetration' => 'getRevenuePenetration',
        'lost_revenue_due_to_oos' => 'getLostRevenueDueToOos',
        'coupons_revenue_penetration' => 'getCouponsRevenuePenetration',
        'next30_day_total_subscriptions_revenue' => 'getNext30DayTotalSubscriptionsRevenue',
        'next60_day_total_subscriptions_revenue' => 'getNext60DayTotalSubscriptionsRevenue',
        'next90_day_total_subscriptions_revenue' => 'getNext90DayTotalSubscriptionsRevenue',
        'next30_day_shipped_subscription_units' => 'getNext30DayShippedSubscriptionUnits',
        'next60_day_shipped_subscription_units' => 'getNext60DayShippedSubscriptionUnits',
        'next90_day_shipped_subscription_units' => 'getNext90DayShippedSubscriptionUnits',
        'time_interval' => 'getTimeInterval',
        'currency_code' => 'getCurrencyCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asin'] = $data['asin'] ?? null;
        $this->container['not_delivered_due_to_oos'] = $data['not_delivered_due_to_oos'] ?? null;
        $this->container['total_subscriptions_revenue'] = $data['total_subscriptions_revenue'] ?? null;
        $this->container['shipped_subscription_units'] = $data['shipped_subscription_units'] ?? null;
        $this->container['active_subscriptions'] = $data['active_subscriptions'] ?? null;
        $this->container['revenue_penetration'] = $data['revenue_penetration'] ?? null;
        $this->container['lost_revenue_due_to_oos'] = $data['lost_revenue_due_to_oos'] ?? null;
        $this->container['coupons_revenue_penetration'] = $data['coupons_revenue_penetration'] ?? null;
        $this->container['next30_day_total_subscriptions_revenue'] = $data['next30_day_total_subscriptions_revenue'] ?? null;
        $this->container['next60_day_total_subscriptions_revenue'] = $data['next60_day_total_subscriptions_revenue'] ?? null;
        $this->container['next90_day_total_subscriptions_revenue'] = $data['next90_day_total_subscriptions_revenue'] ?? null;
        $this->container['next30_day_shipped_subscription_units'] = $data['next30_day_shipped_subscription_units'] ?? null;
        $this->container['next60_day_shipped_subscription_units'] = $data['next60_day_shipped_subscription_units'] ?? null;
        $this->container['next90_day_shipped_subscription_units'] = $data['next90_day_shipped_subscription_units'] ?? null;
        $this->container['time_interval'] = $data['time_interval'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
        if (!is_null($this->container['not_delivered_due_to_oos']) && ($this->container['not_delivered_due_to_oos'] > 1E+2)) {
            throw new AssertionException("invalid value for 'not_delivered_due_to_oos', must be smaller than or equal to 1E+2.");
        }

        if (!is_null($this->container['not_delivered_due_to_oos']) && ($this->container['not_delivered_due_to_oos'] < 0)) {
            throw new AssertionException("invalid value for 'not_delivered_due_to_oos', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['total_subscriptions_revenue']) && ($this->container['total_subscriptions_revenue'] < 0)) {
            throw new AssertionException("invalid value for 'total_subscriptions_revenue', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['shipped_subscription_units']) && ($this->container['shipped_subscription_units'] < 0)) {
            throw new AssertionException("invalid value for 'shipped_subscription_units', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['active_subscriptions']) && ($this->container['active_subscriptions'] < 0)) {
            throw new AssertionException("invalid value for 'active_subscriptions', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['revenue_penetration']) && ($this->container['revenue_penetration'] > 1E+2)) {
            throw new AssertionException("invalid value for 'revenue_penetration', must be smaller than or equal to 1E+2.");
        }

        if (!is_null($this->container['revenue_penetration']) && ($this->container['revenue_penetration'] < 0)) {
            throw new AssertionException("invalid value for 'revenue_penetration', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['lost_revenue_due_to_oos']) && ($this->container['lost_revenue_due_to_oos'] < 0)) {
            throw new AssertionException("invalid value for 'lost_revenue_due_to_oos', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['coupons_revenue_penetration']) && ($this->container['coupons_revenue_penetration'] > 1E+2)) {
            throw new AssertionException("invalid value for 'coupons_revenue_penetration', must be smaller than or equal to 1E+2.");
        }

        if (!is_null($this->container['coupons_revenue_penetration']) && ($this->container['coupons_revenue_penetration'] < 0)) {
            throw new AssertionException("invalid value for 'coupons_revenue_penetration', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['next30_day_total_subscriptions_revenue']) && ($this->container['next30_day_total_subscriptions_revenue'] < 0)) {
            throw new AssertionException("invalid value for 'next30_day_total_subscriptions_revenue', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['next60_day_total_subscriptions_revenue']) && ($this->container['next60_day_total_subscriptions_revenue'] < 0)) {
            throw new AssertionException("invalid value for 'next60_day_total_subscriptions_revenue', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['next90_day_total_subscriptions_revenue']) && ($this->container['next90_day_total_subscriptions_revenue'] < 0)) {
            throw new AssertionException("invalid value for 'next90_day_total_subscriptions_revenue', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['next30_day_shipped_subscription_units']) && ($this->container['next30_day_shipped_subscription_units'] < 0)) {
            throw new AssertionException("invalid value for 'next30_day_shipped_subscription_units', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['next60_day_shipped_subscription_units']) && ($this->container['next60_day_shipped_subscription_units'] < 0)) {
            throw new AssertionException("invalid value for 'next60_day_shipped_subscription_units', must be bigger than or equal to 0.");
        }

        if (!is_null($this->container['next90_day_shipped_subscription_units']) && ($this->container['next90_day_shipped_subscription_units'] < 0)) {
            throw new AssertionException("invalid value for 'next90_day_shipped_subscription_units', must be bigger than or equal to 0.");
        }

            if ($this->container['time_interval'] !== null) {
            $this->container['time_interval']->validate();
            }

    }


    /**
     * Gets asin
     *
     * @return string|null
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param string|null $asin The Amazon Standard Identification Number (ASIN).
     *
     * @return self
     */
    public function setAsin($asin) : self
    {
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets not_delivered_due_to_oos
     *
     * @return float|null
     */
    public function getNotDeliveredDueToOos()
    {
        return $this->container['not_delivered_due_to_oos'];
    }

    /**
     * Sets not_delivered_due_to_oos
     *
     * @param float|null $not_delivered_due_to_oos The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable only for the `PERFORMANCE` `timePeriodType`.
     *
     * @return self
     */
    public function setNotDeliveredDueToOos($not_delivered_due_to_oos) : self
    {
        $this->container['not_delivered_due_to_oos'] = $not_delivered_due_to_oos;

        return $this;
    }

    /**
     * Gets total_subscriptions_revenue
     *
     * @return float|null
     */
    public function getTotalSubscriptionsRevenue()
    {
        return $this->container['total_subscriptions_revenue'];
    }

    /**
     * Sets total_subscriptions_revenue
     *
     * @param float|null $total_subscriptions_revenue The revenue generated from subscriptions over a period of time. Applicable only for the `PERFORMANCE` `timePeriodType`.
     *
     * @return self
     */
    public function setTotalSubscriptionsRevenue($total_subscriptions_revenue) : self
    {
        $this->container['total_subscriptions_revenue'] = $total_subscriptions_revenue;

        return $this;
    }

    /**
     * Gets shipped_subscription_units
     *
     * @return float|null
     */
    public function getShippedSubscriptionUnits()
    {
        return $this->container['shipped_subscription_units'];
    }

    /**
     * Sets shipped_subscription_units
     *
     * @param float|null $shipped_subscription_units The number of units shipped to the subscribers over a period of time. Applicable only for the `PERFORMANCE` `timePeriodType`.
     *
     * @return self
     */
    public function setShippedSubscriptionUnits($shipped_subscription_units) : self
    {
        $this->container['shipped_subscription_units'] = $shipped_subscription_units;

        return $this;
    }

    /**
     * Gets active_subscriptions
     *
     * @return float|null
     */
    public function getActiveSubscriptions()
    {
        return $this->container['active_subscriptions'];
    }

    /**
     * Sets active_subscriptions
     *
     * @param float|null $active_subscriptions The number of active subscriptions present at the end of the period. Applicable only for the `PERFORMANCE` `timePeriodType`.
     *
     * @return self
     */
    public function setActiveSubscriptions($active_subscriptions) : self
    {
        $this->container['active_subscriptions'] = $active_subscriptions;

        return $this;
    }

    /**
     * Gets revenue_penetration
     *
     * @return float|null
     */
    public function getRevenuePenetration()
    {
        return $this->container['revenue_penetration'];
    }

    /**
     * Sets revenue_penetration
     *
     * @param float|null $revenue_penetration The percentage of total program revenue out of total product revenue. Applicable only for the `PERFORMANCE` `timePeriodType`.
     *
     * @return self
     */
    public function setRevenuePenetration($revenue_penetration) : self
    {
        $this->container['revenue_penetration'] = $revenue_penetration;

        return $this;
    }

    /**
     * Gets lost_revenue_due_to_oos
     *
     * @return float|null
     */
    public function getLostRevenueDueToOos()
    {
        return $this->container['lost_revenue_due_to_oos'];
    }

    /**
     * Sets lost_revenue_due_to_oos
     *
     * @param float|null $lost_revenue_due_to_oos The revenue that would have been generated had there not been out of stock. Applicable only for the PERFORMANCE timePeriodType.
     *
     * @return self
     */
    public function setLostRevenueDueToOos($lost_revenue_due_to_oos) : self
    {
        $this->container['lost_revenue_due_to_oos'] = $lost_revenue_due_to_oos;

        return $this;
    }

    /**
     * Gets coupons_revenue_penetration
     *
     * @return float|null
     */
    public function getCouponsRevenuePenetration()
    {
        return $this->container['coupons_revenue_penetration'];
    }

    /**
     * Sets coupons_revenue_penetration
     *
     * @param float|null $coupons_revenue_penetration The percentage of revenue from ASINs with coupons out of total revenue from all ASINs. Applicable only for the PERFORMANCE timePeriodType.
     *
     * @return self
     */
    public function setCouponsRevenuePenetration($coupons_revenue_penetration) : self
    {
        $this->container['coupons_revenue_penetration'] = $coupons_revenue_penetration;

        return $this;
    }

    /**
     * Gets next30_day_total_subscriptions_revenue
     *
     * @return float|null
     */
    public function getNext30DayTotalSubscriptionsRevenue()
    {
        return $this->container['next30_day_total_subscriptions_revenue'];
    }

    /**
     * Sets next30_day_total_subscriptions_revenue
     *
     * @param float|null $next30_day_total_subscriptions_revenue The forecasted total subscription revenue for the next 30 days. Applicable only for the `FORECAST` `timePeriodType`.
     *
     * @return self
     */
    public function setNext30DayTotalSubscriptionsRevenue($next30_day_total_subscriptions_revenue) : self
    {
        $this->container['next30_day_total_subscriptions_revenue'] = $next30_day_total_subscriptions_revenue;

        return $this;
    }

    /**
     * Gets next60_day_total_subscriptions_revenue
     *
     * @return float|null
     */
    public function getNext60DayTotalSubscriptionsRevenue()
    {
        return $this->container['next60_day_total_subscriptions_revenue'];
    }

    /**
     * Sets next60_day_total_subscriptions_revenue
     *
     * @param float|null $next60_day_total_subscriptions_revenue The forecasted total subscription revenue for the next 60 days. Applicable only for the `FORECAST` `timePeriodType`.
     *
     * @return self
     */
    public function setNext60DayTotalSubscriptionsRevenue($next60_day_total_subscriptions_revenue) : self
    {
        $this->container['next60_day_total_subscriptions_revenue'] = $next60_day_total_subscriptions_revenue;

        return $this;
    }

    /**
     * Gets next90_day_total_subscriptions_revenue
     *
     * @return float|null
     */
    public function getNext90DayTotalSubscriptionsRevenue()
    {
        return $this->container['next90_day_total_subscriptions_revenue'];
    }

    /**
     * Sets next90_day_total_subscriptions_revenue
     *
     * @param float|null $next90_day_total_subscriptions_revenue The forecasted total subscription revenue for the next 90 days. Applicable only for the `FORECAST` `timePeriodType`.
     *
     * @return self
     */
    public function setNext90DayTotalSubscriptionsRevenue($next90_day_total_subscriptions_revenue) : self
    {
        $this->container['next90_day_total_subscriptions_revenue'] = $next90_day_total_subscriptions_revenue;

        return $this;
    }

    /**
     * Gets next30_day_shipped_subscription_units
     *
     * @return float|null
     */
    public function getNext30DayShippedSubscriptionUnits()
    {
        return $this->container['next30_day_shipped_subscription_units'];
    }

    /**
     * Sets next30_day_shipped_subscription_units
     *
     * @param float|null $next30_day_shipped_subscription_units The forecasted shipped subscription units for the next 30 days. Applicable only for the `FORECAST` `timePeriodType`.
     *
     * @return self
     */
    public function setNext30DayShippedSubscriptionUnits($next30_day_shipped_subscription_units) : self
    {
        $this->container['next30_day_shipped_subscription_units'] = $next30_day_shipped_subscription_units;

        return $this;
    }

    /**
     * Gets next60_day_shipped_subscription_units
     *
     * @return float|null
     */
    public function getNext60DayShippedSubscriptionUnits()
    {
        return $this->container['next60_day_shipped_subscription_units'];
    }

    /**
     * Sets next60_day_shipped_subscription_units
     *
     * @param float|null $next60_day_shipped_subscription_units The forecasted shipped subscription units for the next 60 days. Applicable only for the `FORECAST` `timePeriodType`.
     *
     * @return self
     */
    public function setNext60DayShippedSubscriptionUnits($next60_day_shipped_subscription_units) : self
    {
        $this->container['next60_day_shipped_subscription_units'] = $next60_day_shipped_subscription_units;

        return $this;
    }

    /**
     * Gets next90_day_shipped_subscription_units
     *
     * @return float|null
     */
    public function getNext90DayShippedSubscriptionUnits()
    {
        return $this->container['next90_day_shipped_subscription_units'];
    }

    /**
     * Sets next90_day_shipped_subscription_units
     *
     * @param float|null $next90_day_shipped_subscription_units The forecasted shipped subscription units for the next 90 days. Applicable only for the `FORECAST` `timePeriodType`.
     *
     * @return self
     */
    public function setNext90DayShippedSubscriptionUnits($next90_day_shipped_subscription_units) : self
    {
        $this->container['next90_day_shipped_subscription_units'] = $next90_day_shipped_subscription_units;

        return $this;
    }

    /**
     * Gets time_interval
     *
     * @return \AmazonPHP\SellingPartner\Model\ProductTypesDefinitions\TimeInterval|null
     */
    public function getTimeInterval()
    {
        return $this->container['time_interval'];
    }

    /**
     * Sets time_interval
     *
     * @param \AmazonPHP\SellingPartner\Model\ProductTypesDefinitions\TimeInterval|null $time_interval time_interval
     *
     * @return self
     */
    public function setTimeInterval($time_interval) : self
    {
        $this->container['time_interval'] = $time_interval;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The currency code in ISO 4217 format.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code) : self
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

