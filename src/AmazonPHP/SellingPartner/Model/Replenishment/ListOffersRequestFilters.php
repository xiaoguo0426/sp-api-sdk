<?php

declare(strict_types=1);


namespace AmazonPHP\SellingPartner\Model\Replenishment;

use \ArrayAccess;
use \AmazonPHP\SellingPartner\ObjectSerializer;
use \AmazonPHP\SellingPartner\ModelInterface;
use \AmazonPHP\SellingPartner\Exception\AssertionException;

/**
* Selling Partner API for Replenishment
*
* The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
*
* The version of the OpenAPI document: 2022-11-07
*
* This class was auto-generated by https://openapi-generator.tech
* Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ListOffersRequestFilters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ListOffersRequestFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'marketplace_id' => 'string',
        'skus' => 'string[]',
        'asins' => 'string[]',
        'eligibilities' => '\AmazonPHP\SellingPartner\Model\Replenishment\EligibilityStatus[]',
        'preferences' => '\AmazonPHP\SellingPartner\Model\Replenishment\Preference',
        'promotions' => '\AmazonPHP\SellingPartner\Model\Replenishment\Promotion',
        'program_types' => '\AmazonPHP\SellingPartner\Model\Replenishment\ProgramType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'marketplace_id' => null,
        'skus' => null,
        'asins' => null,
        'eligibilities' => null,
        'preferences' => null,
        'promotions' => null,
        'program_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'marketplace_id' => 'marketplaceId',
        'skus' => 'skus',
        'asins' => 'asins',
        'eligibilities' => 'eligibilities',
        'preferences' => 'preferences',
        'promotions' => 'promotions',
        'program_types' => 'programTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'marketplace_id' => 'setMarketplaceId',
        'skus' => 'setSkus',
        'asins' => 'setAsins',
        'eligibilities' => 'setEligibilities',
        'preferences' => 'setPreferences',
        'promotions' => 'setPromotions',
        'program_types' => 'setProgramTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'marketplace_id' => 'getMarketplaceId',
        'skus' => 'getSkus',
        'asins' => 'getAsins',
        'eligibilities' => 'getEligibilities',
        'preferences' => 'getPreferences',
        'promotions' => 'getPromotions',
        'program_types' => 'getProgramTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['marketplace_id'] = $data['marketplace_id'] ?? null;
        $this->container['skus'] = $data['skus'] ?? null;
        $this->container['asins'] = $data['asins'] ?? null;
        $this->container['eligibilities'] = $data['eligibilities'] ?? null;
        $this->container['preferences'] = $data['preferences'] ?? null;
        $this->container['promotions'] = $data['promotions'] ?? null;
        $this->container['program_types'] = $data['program_types'] ?? null;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
        if ($this->container['marketplace_id'] === null) {
            throw new AssertionException("'marketplace_id' can't be null");
        }

        if (!is_null($this->container['skus']) && (count($this->container['skus']) > 20)) {
            throw new AssertionException("invalid value for 'skus', number of items must be less than or equal to 20.");
        }

        if (!is_null($this->container['skus']) && (count($this->container['skus']) < 1)) {
            throw new AssertionException("invalid value for 'skus', number of items must be greater than or equal to 1.");
        }

        if (!is_null($this->container['asins']) && (count($this->container['asins']) > 20)) {
            throw new AssertionException("invalid value for 'asins', number of items must be less than or equal to 20.");
        }

        if (!is_null($this->container['asins']) && (count($this->container['asins']) < 1)) {
            throw new AssertionException("invalid value for 'asins', number of items must be greater than or equal to 1.");
        }

        if (!is_null($this->container['eligibilities']) && (count($this->container['eligibilities']) < 1)) {
            throw new AssertionException("invalid value for 'eligibilities', number of items must be greater than or equal to 1.");
        }

            if ($this->container['preferences'] !== null) {
            $this->container['preferences']->validate();
            }

            if ($this->container['promotions'] !== null) {
            $this->container['promotions']->validate();
            }

        if ($this->container['program_types'] === null) {
            throw new AssertionException("'program_types' can't be null");
        }

        if ((count($this->container['program_types']) < 1)) {
            throw new AssertionException("invalid value for 'program_types', number of items must be greater than or equal to 1.");
        }

    }


    /**
     * Gets marketplace_id
     *
     * @return string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplace_id'];
    }

    /**
     * Sets marketplace_id
     *
     * @param string $marketplace_id The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
     *
     * @return self
     */
    public function setMarketplaceId($marketplace_id) : self
    {
        $this->container['marketplace_id'] = $marketplace_id;

        return $this;
    }

    /**
     * Gets skus
     *
     * @return string[]|null
     */
    public function getSkus()
    {
        return $this->container['skus'];
    }

    /**
     * Sets skus
     *
     * @param string[]|null $skus A list of SKUs to filter. This filter is only supported for sellers and not for vendors.
     *
     * @return self
     */
    public function setSkus($skus) : self
    {
        $this->container['skus'] = $skus;

        return $this;
    }

    /**
     * Gets asins
     *
     * @return string[]|null
     */
    public function getAsins()
    {
        return $this->container['asins'];
    }

    /**
     * Sets asins
     *
     * @param string[]|null $asins A list of Amazon Standard Identification Numbers (ASINs).
     *
     * @return self
     */
    public function setAsins($asins) : self
    {
        $this->container['asins'] = $asins;

        return $this;
    }

    /**
     * Gets eligibilities
     *
     * @return \AmazonPHP\SellingPartner\Model\Replenishment\EligibilityStatus[]|null
     */
    public function getEligibilities()
    {
        return $this->container['eligibilities'];
    }

    /**
     * Sets eligibilities
     *
     * @param \AmazonPHP\SellingPartner\Model\Replenishment\EligibilityStatus[]|null $eligibilities A list of eligibilities associated with an offer.
     *
     * @return self
     */
    public function setEligibilities($eligibilities) : self
    {
        $this->container['eligibilities'] = $eligibilities;

        return $this;
    }

    /**
     * Gets preferences
     *
     * @return \AmazonPHP\SellingPartner\Model\Replenishment\Preference|null
     */
    public function getPreferences()
    {
        return $this->container['preferences'];
    }

    /**
     * Sets preferences
     *
     * @param \AmazonPHP\SellingPartner\Model\Replenishment\Preference|null $preferences preferences
     *
     * @return self
     */
    public function setPreferences($preferences) : self
    {
        $this->container['preferences'] = $preferences;

        return $this;
    }

    /**
     * Gets promotions
     *
     * @return \AmazonPHP\SellingPartner\Model\Replenishment\Promotion|null
     */
    public function getPromotions()
    {
        return $this->container['promotions'];
    }

    /**
     * Sets promotions
     *
     * @param \AmazonPHP\SellingPartner\Model\Replenishment\Promotion|null $promotions promotions
     *
     * @return self
     */
    public function setPromotions($promotions) : self
    {
        $this->container['promotions'] = $promotions;

        return $this;
    }

    /**
     * Gets program_types
     *
     * @return \AmazonPHP\SellingPartner\Model\Replenishment\ProgramType[]
     */
    public function getProgramTypes()
    {
        return $this->container['program_types'];
    }

    /**
     * Sets program_types
     *
     * @param \AmazonPHP\SellingPartner\Model\Replenishment\ProgramType[] $program_types A list of replenishment program types.
     *
     * @return self
     */
    public function setProgramTypes($program_types) : self
    {
        $this->container['program_types'] = $program_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

